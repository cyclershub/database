-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE  FUNCTION update_timestamp_on_change()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_on = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TABLE IF NOT EXISTS public.users (
	id integer PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (
		INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
	),
	uid VARCHAR(36) NOT NULL UNIQUE,
	username VARCHAR(64) NOT NULL UNIQUE,
	email VARCHAR(255) NOT NULL UNIQUE,
	password VARCHAR(255) NOT NULL,
	created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.workspaces (
	id integer PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (
		INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
	),
	uid VARCHAR(36) NOT NULL UNIQUE,
	updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_by INTEGER,
	created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	created_by INTEGER NOT NULL,
	title VARCHAR(255) NOT NULL UNIQUE,
	description TEXT NOT NULL
);

CREATE TRIGGER update_workspaces_updated_on
    BEFORE UPDATE
    ON
        public.workspaces
    FOR EACH ROW
EXECUTE PROCEDURE update_timestamp_on_change();

CREATE TABLE IF NOT EXISTS public.lists (
	id integer PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (
		INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
	),
	uid VARCHAR(36) NOT NULL UNIQUE,
	updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_by INTEGER,
	created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	created_by INTEGER NOT NULL,
	view_id INTEGER NOT NULL,
	title VARCHAR(255) NOT NULL
);

CREATE TRIGGER update_lists_updated_on
    BEFORE UPDATE
    ON
        public.lists
    FOR EACH ROW
EXECUTE PROCEDURE update_timestamp_on_change();

CREATE TABLE IF NOT EXISTS public.cards (
	id integer PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (
		INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
	),
	uid VARCHAR(36) NOT NULL UNIQUE,
	updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_by INTEGER,
	created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	created_by INTEGER NOT NULL,
	list_id INTEGER NOT NULL,
	title VARCHAR(255) NOT NULL,
	description TEXT NOT NULL,
	data JSON NOT NULL,
	due_date TIMESTAMP NOT NULL
);

CREATE TRIGGER update_cards_updated_on
    BEFORE UPDATE
    ON
        public.cards
    FOR EACH ROW
EXECUTE PROCEDURE update_timestamp_on_change();

CREATE TABLE IF NOT EXISTS public.views (
	id integer PRIMARY KEY NOT NULL GENERATED ALWAYS AS IDENTITY (
		INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1
	),
	uid VARCHAR(36) NOT NULL UNIQUE,
	updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_by INTEGER,
	created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	created_by INTEGER NOT NULL,
	workspace_id INTEGER NOT NULL,
	title VARCHAR(64) NOT NULL,
	data JSON NOT NULL,
	type VARCHAR(25) NOT NULL
);

CREATE TRIGGER update_views_updated_on
    BEFORE UPDATE
    ON
        public.views
    FOR EACH ROW
EXECUTE PROCEDURE update_timestamp_on_change();

ALTER TABLE
	workspaces
ADD
	CONSTRAINT workspaces_created_by_users_id FOREIGN KEY (created_by) REFERENCES users(id);

ALTER TABLE
	lists
ADD
	CONSTRAINT lists_created_by_users_id FOREIGN KEY (created_by) REFERENCES users(id);

ALTER TABLE
	lists
ADD
	CONSTRAINT lists_view_id_views_id FOREIGN KEY (view_id) REFERENCES views(id);

ALTER TABLE
	cards
ADD
	CONSTRAINT cards_updated_by_users_id FOREIGN KEY (updated_by) REFERENCES users(id);

ALTER TABLE
	cards
ADD
	CONSTRAINT cards_created_by_users_id FOREIGN KEY (created_by) REFERENCES users(id);

ALTER TABLE
	cards
ADD
	CONSTRAINT cards_list_id_lists_id FOREIGN KEY (list_id) REFERENCES lists(id);

ALTER TABLE
	views
ADD
	CONSTRAINT views_created_by_users_id FOREIGN KEY (created_by) REFERENCES users(id);

ALTER TABLE
	views
ADD
	CONSTRAINT views_workspace_id_workspaces_id FOREIGN KEY (workspace_id) REFERENCES workspaces(id);

INSERT INTO
	public.users (username, email, password, uid, created_on)
VALUES
	(
		'Letsmoe',
		'letsmoe1404@gmail.com',
		'b35b2dc504138005b7c888c72d3f27759c26586038cd6617bbf89e353604d6244bc8428d7e7f16914bfd02da21460542',
		'3f0e7d2b-be68-4c39-b5d5-a34a130c63a0',
		'1999-01-08 04:05:06'
	);

END;